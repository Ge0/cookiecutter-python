[tox]
envlist =
{%- if cookiecutter.linter == "flake8" %}
    flake8
{%- endif %}
    isort
{%- if cookiecutter.type_checker == "mypy" %}
    mypy
{%- endif %}
{%- if cookiecutter.code_formatter == "black" %}
    black
{%- endif %}
    manifest
    pydocstyle
    doc8
{%- if cookiecutter.doc_generator == "sphinx" %}
    sphinx
{%- endif %}
{%- if cookiecutter.test_suite != "none" %}
{%- if cookiecutter.python_min_version == "2.7" %}
    py27
{%- endif %}
{%- if cookiecutter.python_min_version <= "3.4" %}
    py34
{%- endif %}
{%- if cookiecutter.python_min_version <= "3.5" %}
    py35
{%- endif %}
{%- if cookiecutter.python_min_version <= "3.6" %}
    py36
{%- endif %}
    py37
    coverage
{%- endif %}
{%- if cookiecutter.linter == "flake8" %}

[testenv:flake8]
deps = flake8
skip_install = True
commands = flake8
{%- endif %}

[testenv:isort]
deps = isort
skip_install = True
commands = isort --check-only --recursive --diff
{%- if cookiecutter.type_checker == "mypy" %}

[testenv:mypy]
deps = mypy
skip_install = True
commands = mypy src
{%- endif %}
{%- if cookiecutter.code_formatter == "black" %}

[testenv:black]
deps = black
skip_install = True
commands = black --line-length 79 --check setup.py src tests
{%- endif %}

[testenv:manifest]
deps = check-manifest
skip_install = True
commands = check-manifest

[testenv:pydocstyle]
deps = pydocstyle
skip_install = True
commands = pydocstyle src

[testenv:doc8]
deps =
    doc8
    pygments
skip_install = True
commands = doc8
{%- if cookiecutter.doc_generator == "sphinx" %}

[testenv:sphinx]
{%- if cookiecutter.cli_parser == "none" %}
deps = sphinx
{%- else %}
deps =
    sphinx
    sphinxcontrib-programoutput
{%- endif %}
whitelist_externals = rm
commands =
    rm -fr docs/api
    sphinx-apidoc --no-toc --separate --module-first -o docs/api src/{{ cookiecutter.project_package }}
    sphinx-build -W -b html docs docs/_build/html
    sphinx-build -W -b linkcheck docs docs/_build/linkcheck
{%- endif %}
{%- if cookiecutter.test_suite != "none" %}

[testenv]
deps =
    coverage
    pytest
commands =
    coverage run --parallel --module pytest {posargs}

[testenv:coverage]
deps = coverage
skip_install = True
commands =
    coverage combine
    coverage report
{%- endif %}
